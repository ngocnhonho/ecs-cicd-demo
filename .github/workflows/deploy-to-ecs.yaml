name: Build image and deploy to ECS on AWS
on:
  push:
    branches:
      - main
    paths-ignore:
      - README.md
      # - '.github/workflows/*'
  workflow_dispatch:

env:
  BACKEND_IMAGE_NAME: ecs-demo-backend
  FRONTEND_IMAGE_NAME: ecs-demo-frontend
  AWS_REGION: ap-southeast-1
  ECS_TASK_DEFINITION: AppReact-Task-Difinition
  BACKEND_CONTAINER_NAME: nodebackend
  FRONTEND_CONTAINER_NAME: nodefrontend
  ECS_SERVICE: AppReact-Test-Services
  ECS_CLUSTER: AppReact-Test-Cluster
  ECS_EXECUTION_ROLE: 'arn:aws:iam::590183692627:role/ecsTaskExecutionRole'
  CONTAINER_PORT: 8080
jobs:
  Build-image-backend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code from repo
        uses: actions/checkout@v4
      - name: Details image
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{vars.DOCKERHUB_USERNAME}}/${{env.BACKEND_IMAGE_NAME}}
          tags: |
            latest
            v1.0.${{github.run_number}}

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build and push image
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          file: ./backend/Dockerfile.prod
          push: true
          tags: ${{ steps.meta.outputs.tags }}

  Build-image-frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code from repo
        uses: actions/checkout@v4
      - name: Setup Node and install depencencies
        uses: ./.github/actions/setupnode
        with: 
          node-version: 22
      - name: Install dependencies for frontend
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          cd frontend
          npm install
      - name: Build project
        run: |
          cd frontend
          npm run build
      - name: Upload dist artifact
        uses: actions/upload-pages-artifact@v3 # or specific "vX.X.X" version tag for this action
        with:
          name: app-build
          path: frontend/build/       
      - name: Details image
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{vars.DOCKERHUB_USERNAME}}/${{env.FRONTEND_IMAGE_NAME}}
          tags: |
            latest
            v1.0.${{github.run_number}}

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build and push image
        uses: docker/build-push-action@v6
        with:
          context: ./frontend
          file: ./frontend/Dockerfile.prod
          push: true
          tags: ${{ steps.meta.outputs.tags }}

  Deploy-to-ECS:
    runs-on: ubuntu-latest
    needs:
      - Build-image-backend
      - Build-image-frontend
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Verify AWS credentials
        run: |
          aws sts get-caller-identity
          aws ecs list-task-definitions --family-prefix ${{ env.ECS_TASK_DEFINITION }}

      # - name: Fill in the new image ID for node first in the Amazon ECS task definition
      #   id: task-def
      #   uses: aws-actions/amazon-ecs-render-task-definition@v1
      #   with:
      #     task-definition-family: ${{ env.ECS_TASK_DEFINITION }}
      #     container-name: ${{ env.BACKEND_CONTAINER_NAME }}
      #     image: ${{vars.DOCKERHUB_USERNAME}}/${{env.BACKEND_IMAGE_NAME}}
      # - name: Modify Amazon ECS task definition with second container for app frontend
      #   id: task-def-app-frontend
      #   uses: aws-actions/amazon-ecs-render-task-definition@v1
      #   with:
      #     task-definition: ${{ steps.task-def.outputs.task-definition }}
      #     container-name: ${{ env.FRONTEND_CONTAINER_NAME }}
      #     image: ${{vars.DOCKERHUB_USERNAME}}/${{env.FRONTEND_IMAGE_NAME}}

      - name: Create or check ECS task definition
        id: ecs-task
        env:
          TASK_NAME: ${{ env.ECS_TASK_DEFINITION }}
          IMAGE_URI_BACKEND: "${{vars.DOCKERHUB_USERNAME}}/${{env.BACKEND_IMAGE_NAME}}"
          IMAGE_URI_FRONTEND: "${{vars.DOCKERHUB_USERNAME}}/${{env.FRONTEND_IMAGE_NAME}}"
          LOG_GROUP: "/ecs/${{ env.ECS_TASK_DEFINITION }}"
          AWS_REGION: ${{ env.AWS_REGION }}
        run: |
          # Cài đặt jq nếu chưa có
          if ! command -v jq &> /dev/null; then
            sudo apt-get update
            sudo apt-get install -y jq
          fi

          # Tạo CloudWatch Log Group nếu chưa tồn tại
          if ! aws logs describe-log-groups --log-group-name-prefix $LOG_GROUP --query 'logGroups[].logGroupName' --output text | grep -q $LOG_GROUP; then
            aws logs create-log-group --log-group-name $LOG_GROUP
            aws logs put-retention-policy --log-group-name $LOG_GROUP --retention-in-days 30
            echo "Created new CloudWatch Log Group with 30-day retention"
          fi

          # Kiểm tra task definition đã tồn tại chưa
          if aws ecs describe-task-definition --task-definition $TASK_NAME &> /dev/null; then
            echo "Task definition exists"
            echo "is_new=false" >> $GITHUB_OUTPUT
          else
            echo "Creating new task definition..."
            
          echo '[
            {
              "name": "'"${{ env.BACKEND_CONTAINER_NAME }}"'",
              "image": "'"$IMAGE_URI_BACKEND"'",
              "essential": true,
              "portMappings": [
                {
                  "containerPort": 8080,
                  "hostPort": 8080,
                  "protocol": "tcp",
                  "appProtocol": "http",
                  "name": "backend-api"
                }
              ],
              "environment": [
                {
                  "name": "MONGOURI",
                  "value": "'"${{ secrets.MONGODB_HOST }}"'"
                }
              ],
              "logConfiguration": {
                "logDriver": "awslogs",
                "options": {
                  "awslogs-group": "'"$LOG_GROUP"'",
                  "awslogs-region": "'"$AWS_REGION"'",
                  "awslogs-stream-prefix": "backend-api",
                  "awslogs-datetime-format": "%Y-%m-%d %H:%M:%S",
                  "awslogs-multiline-pattern": "^\\\\[\\\\d{4}-\\\\d{2}-\\\\d{2}"
                }
              }
            },
            {
              "name": "'"${{ env.FRONTEND_CONTAINER_NAME }}"'",
              "image": "'"$IMAGE_URI_FRONTEND"'",
              "essential": true,
              "portMappings": [
                {
                  "containerPort": 80,
                  "hostPort": 80,
                  "protocol": "tcp",
                  "appProtocol": "http",
                  "name": "frontend"
                }
              ]
            }
          ]' > task-definition.json

            # Validate JSON
            if ! jq empty task-definition.json; then
              echo "::error::Invalid JSON in task-definition.json"
              cat task-definition.json
              exit 1
            fi

            # Đăng ký task definition
            aws ecs register-task-definition \
              --family $TASK_NAME \
              --network-mode awsvpc \
              --requires-compatibilities FARGATE \
              --cpu 512 \
              --memory 1024 \
              --task-role-arn ${{ env.ECS_TASK_ROLE }} \
              --execution-role-arn ${{ env.ECS_EXECUTION_ROLE }} \
              --container-definitions file://task-definition.json

            echo "Task definition registered successfully"
          fi

      - name: Get VPC Configuration
        id: vpc-config
        run: |
          SUBNETS=$(aws ec2 describe-subnets --filters "Name=tag:Name,Values=*public*" --query 'Subnets[*].SubnetId' --output json)
          SG=$(aws ec2 describe-security-groups --filters "Name=group-name,Values=default" --query 'SecurityGroups[0].GroupId' --output text)
          
          echo "subnets=$SUBNETS" >> $GITHUB_OUTPUT
          echo "security_group=$SG" >> $GITHUB_OUTPUT    
      - name: Create or Update ECS Service
        run: |
          aws ecs create-service \
            --cluster $ECS_CLUSTER \
            --service-name $ECS_SERVICE \
            --task-definition ${{ env.ECS_TASK_DEFINITION }} \
            --desired-count 1 \
            --launch-type FARGATE \
            --capacity-provider-strategy \
              '[{"capacityProvider":"FARGATE","weight":1,"base":1}]' \
            --network-configuration \
              '{
                "awsvpcConfiguration": {
                  "subnets": ${{ steps.vpc-config.outputs.subnets }},
                  "securityGroups": ["${{ steps.vpc-config.outputs.security_group }}"],
                  "assignPublicIp": "ENABLED"
                }
              }' \
            --enable-execute-command
      # - name: Deploy Amazon ECS task definition
      #   uses: aws-actions/amazon-ecs-deploy-task-definition@v2
      #   with:
      #     task-definition: ${{ steps.task-def-app-frontend.outputs.task-definition }}
      #     service: ${{ env.ECS_SERVICE }}
      #     cluster: ${{ env.ECS_CLUSTER }}
      #     wait-for-service-stability: true
        