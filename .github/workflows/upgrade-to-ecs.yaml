name: Build image and deploy to ECS on AWS
on:
  push:
    branches:
      # - main
      - feature/dev
    paths-ignore:
      - README.md
      - '.github/workflows/*'
  workflow_dispatch:

env:
  BACKEND_IMAGE_NAME: ecs-demo-backend
  FRONTEND_IMAGE_NAME: ecs-demo-frontend
  AWS_REGION: ap-southeast-1
  ECS_TASK_DEFINITION: AppReact-Task-Difinition
  BACKEND_CONTAINER_NAME: nodebackend
  FRONTEND_CONTAINER_NAME: nodefrontend
  ECS_SERVICE_NAME: AppReact-Test-Services
  ECS_CLUSTER_NAME: AppReact-Test-Cluster
jobs:
  Build-image-backend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code from repo
        uses: actions/checkout@v4
      - name: Details image
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{vars.DOCKERHUB_USERNAME}}/${{env.BACKEND_IMAGE_NAME}}
          tags: |
            latest
            v1.0.${{github.run_number}}

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build and push image
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          file: ./backend/Dockerfile.prod
          push: true
          tags: ${{ steps.meta.outputs.tags }}

  Build-image-frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code from repo
        uses: actions/checkout@v4
      - name: Setup Node and install depencencies
        uses: ./.github/actions/setupnode
        with: 
          node-version: 22
      - name: Install dependencies for frontend
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          cd frontend
          npm install
      - name: Build project
        run: |
          cd frontend
          npm run build
      - name: Upload dist artifact
        uses: actions/upload-pages-artifact@v3 # or specific "vX.X.X" version tag for this action
        with:
          name: app-build
          path: frontend/build/       
      - name: Details image
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{vars.DOCKERHUB_USERNAME}}/${{env.FRONTEND_IMAGE_NAME}}
          tags: |
            latest
            v1.0.${{github.run_number}}

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build and push image
        uses: docker/build-push-action@v6
        with:
          context: ./frontend
          file: ./frontend/Dockerfile.prod
          push: true
          tags: ${{ steps.meta.outputs.tags }}

  Deploy-to-ECS:
    runs-on: ubuntu-latest
    needs:
      - Build-image-backend
      - Build-image-frontend
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Fill in the new image ID for node first in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition-family: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.BACKEND_CONTAINER_NAME }}
          image: ${{vars.DOCKERHUB_USERNAME}}/${{env.BACKEND_IMAGE_NAME}}
      - name: Modify Amazon ECS task definition with second container for app frontend
        id: task-def-app-frontend
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          container-name: ${{ env.FRONTEND_CONTAINER_NAME }}
          image: ${{vars.DOCKERHUB_USERNAME}}/${{env.FRONTEND_IMAGE_NAME}}
      
      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.task-def-app-frontend.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE_NAME }}
          cluster: ${{ env.ECS_CLUSTER_NAME }}
          wait-for-service-stability: true
        